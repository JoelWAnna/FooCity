package foocityBackend;

import java.awt.Dimension;
import java.awt.Point;

import junit.framework.Assert;
import junit.framework.TestCase;

import org.junit.Test;

public class JobManagerTest extends TestCase {
	private JobManager job_manager;

	@Override
	protected void setUp() {
		job_manager = new JobManager();
	}

	@Override
	protected void tearDown() {
		job_manager = null;
	}

	public void testFindWalkingPaths() {
		int size = 5;
		Dimension map_area = new Dimension(size, size);
		int[][] expected = {
				{ -1, -1, -1, -1, -1, -1, -1, -1, -1 },
				{ -1, -1, -1, -1, -1, -1, -1, -1, -1 },
				{ -1, -1, -1, -1,  2, -1, -1, -1, -1 },
				{ -1, -1, -1,  2,  1,  2, -1, -1, -1 },
				{ -1, -1,  2,  1,  0,  1,  2, -1, -1 },
				{ -1, -1, -1,  2,  1,  2, -1, -1, -1 },
				{ -1, -1, -1, -1,  2, -1, -1, -1, -1 },
				{ -1, -1, -1, -1, -1, -1, -1, -1, -1 },
				{ -1, -1, -1, -1, -1, -1, -1, -1, -1 } };
		int[][] path_matrix = new int[size][size];
		for (int y = 0; y < size; ++y)
			for (int x = 0; x < size; ++x)
				path_matrix[x][y] = 1;

		for (int yOrigin = 0; yOrigin < size; ++yOrigin) {
			for (int xOrigin = 0; xOrigin < size; ++xOrigin) {
				int[][] paths = job_manager.findPath(
						new Point(xOrigin, yOrigin), map_area, path_matrix);
				for (int y = 0; y < size; ++y) {
					for (int x = 0; x < size; ++x) {
						String test = "origin " + xOrigin + " " + yOrigin
								+ " point " + x + "," + y;
						Assert.assertEquals(test, expected[x + 4 - xOrigin][y
								+ 4 - yOrigin], paths[x][y]);
					}
				}
			}
		}
	}

	@Test
	public void testFindRoadPaths()	{
		int size = 17;
		Dimension map_area = new Dimension(size, size);
		int[][] path_matrix = new int[size][size];

		for (int y = 0; y < size; ++y)
			for (int x = 0; x < size; ++x)
				path_matrix[x][y] = 1 << 8;

		int [][] expected =
			{
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 4<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1},
				{	-1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 4<<8, 3<<8, 4<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1},
				{	-1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 4<<8, 3<<8, 2<<8, 3<<8, 4<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1},
				{	-1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 4<<8, 3<<8, 2<<8, 1<<8, 2<<8, 3<<8, 4<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1},
				{   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 4<<8, 3<<8, 2<<8, 1<<8,    0, 1<<8, 2<<8, 3<<8, 4<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1},
				{	-1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 4<<8, 3<<8, 2<<8, 1<<8, 2<<8, 3<<8, 4<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1},
				{	-1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 4<<8, 3<<8, 2<<8, 3<<8, 4<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1},
				{	-1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 4<<8, 3<<8, 4<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1},
				{	-1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 4<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1},
				{	-1,   -1,   -1,   -1,	-1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 5<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1},
				{	-1,   -1,   -1,   -1,	-1,	  -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 6<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{	-1,   -1,   -1,   -1,	-1,	  -1,	-1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 7<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{	-1,   -1,   -1,   -1,	-1,   -1,	-1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8, 8<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8, 9<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,10<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,11<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,12<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,13<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,14<<8,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,15<<8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				{   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1},
				
			};

		for (int yOrigin = 0; yOrigin < size; ++yOrigin) {
			for (int xOrigin = 0; xOrigin < size; ++xOrigin) {
				int[][] paths = job_manager.findPath(
						new Point(xOrigin, yOrigin), map_area, path_matrix);
				for (int y = 0; y < size; ++y) {
					for (int x = 0; x < size; ++x) {
						String testMessage = "origin " + xOrigin + " "
								+ yOrigin + " point " + x + "," + y;
						Assert.assertEquals(testMessage, expected[x + 16
								- xOrigin][y + 16 - yOrigin], paths[x][y]);
					}
				}
			}
		}

	}
	
	@Test
	public void testFindPathsWalkAndRoad() {
		int size = 19;
		Dimension map_area = new Dimension(size, size);
		int [][]expected=
		{
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   4<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   4<<8,   3<<8,   4<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   4<<8,   3<<8,   2<<8,   3<<8,   4<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1},
				{     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   4<<8,   3<<8,   2<<8,   1<<8,   2<<8,   3<<8,   4<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1},
				{     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   4<<8,   3<<8,   2<<8,   1<<8,      0,   1<<8,   2<<8,   3<<8,   4<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1},
				{     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   4<<8,   3<<8,   2<<8,   1<<8,   2<<8,   3<<8,   4<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1},
				{     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   4<<8,   3<<8,   2<<8,   3<<8,   4<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   4<<8,   3<<8,   4<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   4<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   5<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   6<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   7<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,   8<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,   9<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  10<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  11<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  12<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  13<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,  14<<8,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,  15<<8,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,15<<8|1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1}
		};	
		
		int[][] path_matrix = new int[size][size];
		for (int yOrigin = 0; yOrigin < size; ++yOrigin) {
			for (int xOrigin = 0; xOrigin < size; ++xOrigin) {
				for (int y = 0; y < size; ++y)
					for (int x = 0; x < size; ++x)
					{
						if (Math.abs(x-xOrigin) + Math.abs(y-yOrigin) > 15)
							path_matrix[x][y] = 1;
						else
							path_matrix[x][y] = 1 << 8;
					}

				int[][] paths = job_manager.findPath(
						new Point(xOrigin, yOrigin), map_area, path_matrix);
				for (int y = 0; y < size; ++y) {
					for (int x = 0; x < size; ++x) {
						String testMessage = "origin " + xOrigin + " "
								+ yOrigin + " point " + x + "," + y;
						Assert.assertEquals(testMessage, expected[x + 18
								- xOrigin][y + 18 - yOrigin], paths[x][y]);
					}
				}
			}
		}
	}
	
	public void testFindPathsWalkAndRoad2() {
		int size = 19;
		Dimension map_area = new Dimension(size, size);
		int [][]expected=
		{
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 2<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 2<<8|2, 1<<8|2, 2<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 2<<8|2, 1<<8|2,      2, 1<<8|2, 2<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1},
				{     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 2<<8|2, 1<<8|2,      2,      1,      2, 1<<8|2, 2<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1},
				{     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 2<<8|2, 1<<8|2,      2,      1,      0,      1,      2, 1<<8|2, 2<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1},
				{     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 2<<8|2, 1<<8|2,      2,      1,      2, 1<<8|2, 2<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1},
				{     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 2<<8|2, 1<<8|2,      2, 1<<8|2, 2<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 2<<8|2, 1<<8|2, 2<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 2<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 3<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 4<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 5<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 6<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 7<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2, 8<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2, 9<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,10<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,11<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,12<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,13<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,14<<8|2,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,15<<8|2,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1},
				{     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1,     -1}
		};	
		
		int[][] path_matrix = new int[size][size];
		for (int yOrigin = 0; yOrigin < size; ++yOrigin) {
			for (int xOrigin = 0; xOrigin < size; ++xOrigin) {
				for (int y = 0; y < size; ++y)
					for (int x = 0; x < size; ++x)
					{
						if (Math.abs(x-xOrigin) + Math.abs(y-yOrigin) > 2)
							path_matrix[x][y] = 1<<8;
						else
							path_matrix[x][y] = 1;
					}

				int[][] paths = job_manager.findPath(
						new Point(xOrigin, yOrigin), map_area, path_matrix);
				for (int y = 0; y < size; ++y) {
					for (int x = 0; x < size; ++x) {
						String testMessage = "origin " + xOrigin + " "
								+ yOrigin + " point " + x + "," + y;
						Assert.assertEquals(testMessage, expected[x + 18
								- xOrigin][y + 18 - yOrigin], paths[x][y]);
					}
				}
			}
		}
	}
	
}
